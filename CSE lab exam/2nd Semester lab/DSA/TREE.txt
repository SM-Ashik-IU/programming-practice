#include<stdio.h>
#include<stdlib.h>
int flag=0;
struct treenode{
    int data;
    struct treenode* left;
    struct treenode* right;
};
struct treenode *newnode(int item){
struct treenode* new=(struct treenode*)malloc(sizeof(struct treenode));
new->data=item;
new->left=NULL;
new->right=NULL;
return new;
};
void preorder(struct treenode* treenode){
    printf("%d ",treenode->data);
    if(treenode->left!=NULL){
        preorder(treenode->left);
    }
    if(treenode->right!=NULL){
        preorder(treenode->right);
    }
}
void postorder(struct treenode* treenode)
{
    if(treenode->left!=NULL){
        postorder(treenode->left);
    }
    if(treenode->right!=NULL){
        postorder(treenode->right);
    }
    printf("%d ",treenode->data);
}
void inorder(struct treenode* treenode)
{
    if(treenode->left!=NULL){
       inorder(treenode->left);
    }
    printf("%d ",treenode->data);

    if(treenode->right!=NULL){
        inorder(treenode->right);
    }

}
void find(struct treenode* treenode,int item){

    if(treenode==NULL){
        return;
    }

    if(treenode->data==item){
        flag=1;
        return;
    }
    if(treenode->left!=NULL){
        find(treenode->left,item);
    }
    if(treenode->right!=NULL){
        find(treenode->right,item);
    }

}
int main()
{
    struct treenode* root=newnode(1);
    root->left=newnode(2);
    root->right=newnode(3);
    root->left->left=newnode(4);
    root->left->right=newnode(5);
    root->right->left=newnode(6);
    root->right->right=newnode(7);
    preorder(root);
    printf("\n");
    postorder(root);
    printf("\n");
    inorder(root);
    printf("\n");
    find(root,366);
    if(flag==1){
        printf("GIVEN ITEM IS FOUND!!!!!!!!\n");
        flag=0;
    }
    else{
        printf("GIVEN ITEM IS NOT FOUND!!!!!!!!\n");
    }

    getchar();


    return 0;
}
